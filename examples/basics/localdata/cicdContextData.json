{
  "channel": "stage",
  "pipelines": {
    "start": {
      "event-handlers": {
        "some-event": {
          "notify": {
            "message": "{{ basicMacro('some-event fired in the start pipeline') }}\n"
          }
        }
      }
    },
    "test": {
      "event-handlers": {
        "another-event": {
          "notify": {
            "message": "{{ basicMacro('another-event fired in the test pipeline') }}\n",
            "enabled": false
          }
        }
      }
    },
    "build": {
      "event-handlers": {
        "testEvent": {
          "notify": {
            "message": "{{ basicMacro('testEventFired!!! yes...') }}\n"
          }
        },
        "testNotifyEvent": {
          "notify": {
            "message": "{{ basicMacro('build is successful') }}\n",
            "capture-response-data": [
              {
                "from": "{{ body.data.channel }}",
                "to": "state.lastPostedToNotifyChannel"
              },
              {
                "from": "{{ body|tojson }}",
                "to": "state.lastPostedHttpResponse"
              }
            ]
          }
        },
        "testRespondEvent": {
          "respond": {
            "someArbitraryKey": "lastPostedDataRandomId={{ state.lastPostedDataRandomId }}",
            "if": "{{ state.lastPostedHttpResponse }}",
            "url": "{{ (state.lastPostedHttpResponse|from_json).url }}",
            "message": "dummy responder message for {{ state.lastPostedDataRandomId }}\n"
          }
        },
        "testSetValuesEvent": {
          "set-values": {
            "extractLastPostedNotifyMessage": {
              "if": "{%- if state.lastPostedHttpResponse -%}\n  1\n{%- endif -%}  \n",
              "set": [
                {
                  "from": "{%- set lastPostedHttpResponse = (state.lastPostedHttpResponse|from_json) -%}\n{{- lastPostedHttpResponse.data.message -}}\n",
                  "to": "state.lastPostedNotifyMessage"
                }
              ]
            }
          }
        },
        "testTriggerPipelineEvent": {
          "trigger-pipeline": {
            "name": "build",
            "args": {
              "whatever": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}"
            }
          }
        },
        "testManualChoiceEvent": {
          "manual-choice": {
            "title": "{{ basicMacro('here are my choices') }}\n",
            "choices": {
              "choiceGroup1": {
                "header": "Choice group one:",
                "options": [
                  {
                    "text": "Choice 1",
                    "value": "c1"
                  },
                  {
                    "text": "Choice 2",
                    "value": "c2"
                  }
                ]
              },
              "choiceGroup2": {
                "header": "Choice group two {{ echo('blah') }}:",
                "options": [
                  {
                    "text": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}",
                    "value": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}"
                  }
                ]
              }
            }
          }
        },
        "testEmbeddedJsonEvent": {
          "notify": {
            "message": "Here is some JSON from c:\\windowspath\\test and \"quotes\" { \"dog\":\"beagle\" }\n"
          }
        }
      }
    },
    "test2": {
      "event-handlers": {
        "blah-event": {
          "manual-choice": {
            "title": "test manual choice with generators",
            "capture-response-data": [
              {
                "from": "{{ body|json_dumps }}",
                "to": "state.lastPostedHttpResponse"
              }
            ],
            "choice-generators": {
              "testGenerator1": {
                "foreach": "state.choiceGeneratorItems",
                "iterator": "currentItem",
                "template": "testkey-{{currentItem.name}}:\n  header: |\n    {{'{{'}} echo('{{currentItem.name}}') {{'}}'}}\n  options:\n    - style: primary\n      value: \"{{'{{'}} echo('{{currentItem.name}} {{currentItem.description}}') {{'}}'}}\"\n      text: '{{currentItem.name}}'\n    - style: primary\n      value: \"{{'{{'}} echo('{{currentItem.name}} {{currentItem.description}}') {{'}}'}}\"\n      text: '{{currentItem.name}}'\n"
              }
            },
            "choices": {
              "choiceGroup1": {
                "header": "Choice group one:",
                "options": [
                  {
                    "text": "Choice 1",
                    "value": "c1"
                  },
                  {
                    "text": "Choice 2",
                    "value": "c2"
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "appPipelinesConfig": {
    "bases": [
      "base1.yaml"
    ],
    "jinja2-macros": {
      "helloWorld": "{%- macro helloWorld(msg) -%}\n  Hello world msg = {{msg}}\n{%- endmacro -%}\n"
    },
    "variables": {
      "myVar1": "test"
    },
    "cicd-contexts": {
      "stage": {
        "channel": "stage",
        "pipelines": {
          "build": {
            "event-handlers": {
              "testEvent": {
                "notify": {
                  "message": "{{ basicMacro('testEventFired!!! yes...') }}\n"
                }
              },
              "testNotifyEvent": {
                "notify": {
                  "message": "{{ basicMacro('build is successful') }}\n",
                  "capture-response-data": [
                    {
                      "from": "{{ body.data.channel }}",
                      "to": "state.lastPostedToNotifyChannel"
                    },
                    {
                      "from": "{{ body|tojson }}",
                      "to": "state.lastPostedHttpResponse"
                    }
                  ]
                }
              },
              "testRespondEvent": {
                "respond": {
                  "someArbitraryKey": "lastPostedDataRandomId={{ state.lastPostedDataRandomId }}",
                  "if": "{{ state.lastPostedHttpResponse }}",
                  "url": "{{ (state.lastPostedHttpResponse|from_json).url }}",
                  "message": "dummy responder message for {{ state.lastPostedDataRandomId }}\n"
                }
              },
              "testSetValuesEvent": {
                "set-values": {
                  "extractLastPostedNotifyMessage": {
                    "if": "{%- if state.lastPostedHttpResponse -%}\n  1\n{%- endif -%}  \n",
                    "set": [
                      {
                        "from": "{%- set lastPostedHttpResponse = (state.lastPostedHttpResponse|from_json) -%}\n{{- lastPostedHttpResponse.data.message -}}\n",
                        "to": "state.lastPostedNotifyMessage"
                      }
                    ]
                  }
                }
              },
              "testTriggerPipelineEvent": {
                "trigger-pipeline": {
                  "name": "build",
                  "args": {
                    "whatever": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}"
                  }
                }
              },
              "testManualChoiceEvent": {
                "manual-choice": {
                  "title": "{{ basicMacro('here are my choices') }}\n",
                  "choices": {
                    "choiceGroup1": {
                      "header": "Choice group one:",
                      "options": [
                        {
                          "text": "Choice 1",
                          "value": "c1"
                        },
                        {
                          "text": "Choice 2",
                          "value": "c2"
                        }
                      ]
                    },
                    "choiceGroup2": {
                      "header": "Choice group two {{ echo('blah') }}:",
                      "options": [
                        {
                          "text": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}",
                          "value": "{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}"
                        }
                      ]
                    }
                  }
                }
              },
              "testEmbeddedJsonEvent": {
                "notify": {
                  "message": "Here is some JSON from c:\\windowspath\\test and \"quotes\" { \"dog\":\"beagle\" }\n"
                }
              }
            }
          },
          "test": {
            "event-handlers": {
              "another-event": {
                "notify": {
                  "enabled": false
                }
              }
            }
          },
          "test2": {
            "event-handlers": {
              "blah-event": {
                "manual-choice": {
                  "title": "test manual choice with generators",
                  "capture-response-data": [
                    {
                      "from": "{{ body|json_dumps }}",
                      "to": "state.lastPostedHttpResponse"
                    }
                  ],
                  "choice-generators": {
                    "testGenerator1": {
                      "foreach": "state.choiceGeneratorItems",
                      "iterator": "currentItem",
                      "template": "testkey-{{currentItem.name}}:\n  header: |\n    {{'{{'}} echo('{{currentItem.name}}') {{'}}'}}\n  options:\n    - style: primary\n      value: \"{{'{{'}} echo('{{currentItem.name}} {{currentItem.description}}') {{'}}'}}\"\n      text: '{{currentItem.name}}'\n    - style: primary\n      value: \"{{'{{'}} echo('{{currentItem.name}} {{currentItem.description}}') {{'}}'}}\"\n      text: '{{currentItem.name}}'\n"
                    }
                  },
                  "choices": {
                    "choiceGroup1": {
                      "header": "Choice group one:",
                      "options": [
                        {
                          "text": "Choice 1",
                          "value": "c1"
                        },
                        {
                          "text": "Choice 2",
                          "value": "c2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "jinja2Macros": {
    "byName": {
      "basicMacro": "{%- macro basicMacro(msg) -%}\n  This is basicMacro! msg = {{msg}}\n{%- endmacro -%}\n",
      "echo": "{%- macro echo(msg) -%}\n  {{msg}}\n{%- endmacro -%}\n",
      "random": "{%- macro random() -%}\n  {{ range(10000, 99999) | random }}\n{%- endmacro -%}\n",
      "helloWorld": "{%- macro helloWorld(msg) -%}\n  Hello world msg = {{msg}}\n{%- endmacro -%}\n"
    },
    "all": "{%- macro basicMacro(msg) -%}\n  This is basicMacro! msg = {{msg}}\n{%- endmacro -%}{%- macro echo(msg) -%}\n  {{msg}}\n{%- endmacro -%}{%- macro random() -%}\n  {{ range(10000, 99999) | random }}\n{%- endmacro -%}{%- macro helloWorld(msg) -%}\n  Hello world msg = {{msg}}\n{%- endmacro -%}"
  },
  "state": {
    "cicdContextDataId": "context-data-id-1",
    "cicdContextName": "stage",
    "key1": "valuechanged",
    "templateTest": "{{tmplctx.prop1}}",
    "key2": "value2",
    "fileBody": {
      "dog": "beagle",
      "bark": {
        "quality": "high",
        "volume": "loud"
      }
    },
    "testList": [
      "a"
    ],
    "testSet": [
      "a",
      "b",
      "c",
      "d"
    ],
    "testHeader2Value": "myvalueforheader2",
    "triggerAutoArg1": "dummyVal",
    "postedData": {
      "85188": {
        "body": {
          "message": "This is basicMacro! msg = testEventFired!!! yes..."
        },
        "headers": {
          "userAgent": "python-requests/2.24.0"
        }
      },
      "46441": {
        "body": {
          "message": "This is basicMacro! msg = build is successful"
        },
        "headers": {
          "userAgent": "python-requests/2.24.0"
        }
      },
      "76689": {
        "body": {
          "message": "Here is some JSON from c:\\windowspath\\test and \"quotes\" { \"dog\":\"beagle\" }"
        },
        "headers": {
          "userAgent": "python-requests/2.24.0"
        }
      }
    },
    "lastPostedDataRandomId": "76689",
    "lastPostedToNotifyChannel": "stage",
    "lastPostedHttpResponse": "{\"args\": {}, \"data\": {\"channel\": \"stage\", \"randomId\": \"17522\", \"choices\": [{\"header\": \"Choice group one:\", \"options\": [{\"value\": \"c1\", \"text\": \"Choice 1\"}, {\"value\": \"c2\", \"text\": \"Choice 2\"}]}, {\"header\": \"item-one\", \"options\": [{\"value\": \"item-one item1 desc\", \"text\": \"item-one\"}, {\"value\": \"item-one item1 desc\", \"text\": \"item-one\"}]}, {\"header\": \"item-two\", \"options\": [{\"value\": \"item-two item2 desc\", \"text\": \"item-two\"}, {\"value\": \"item-two item2 desc\", \"text\": \"item-two\"}]}, {\"header\": \"item-three\", \"options\": [{\"value\": \"item-three item3 desc\", \"text\": \"item-three\"}, {\"value\": \"item-three item3 desc\", \"text\": \"item-three\"}]}]}, \"files\": {}, \"form\": {}, \"headers\": {\"x-forwarded-proto\": \"https\", \"x-forwarded-port\": \"443\", \"host\": \"postman-echo.com\", \"x-amzn-trace-id\": \"Root=1-5f774ad1-3925773425d4f493354f72dc\", \"content-length\": \"1955\", \"user-agent\": \"python-requests/2.24.0\", \"accept-encoding\": \"gzip, deflate\", \"accept\": \"*/*\", \"content-type\": \"application/json; charset=UTF-8\", \"authorization\": \"Bearer FAKE_TOKEN\", \"cache-control\": \"no-cache\"}, \"json\": {\"channel\": \"stage\", \"randomId\": \"17522\", \"choices\": [{\"header\": \"Choice group one:\", \"options\": [{\"value\": \"c1\", \"text\": \"Choice 1\"}, {\"value\": \"c2\", \"text\": \"Choice 2\"}]}, {\"header\": \"item-one\", \"options\": [{\"value\": \"item-one item1 desc\", \"text\": \"item-one\"}, {\"value\": \"item-one item1 desc\", \"text\": \"item-one\"}]}, {\"header\": \"item-two\", \"options\": [{\"value\": \"item-two item2 desc\", \"text\": \"item-two\"}, {\"value\": \"item-two item2 desc\", \"text\": \"item-two\"}]}, {\"header\": \"item-three\", \"options\": [{\"value\": \"item-three item3 desc\", \"text\": \"item-three\"}, {\"value\": \"item-three item3 desc\", \"text\": \"item-three\"}]}]}, \"url\": \"https://postman-echo.com/post\"}",
    "choiceGeneratorItems": {
      "item1": {
        "name": "item-one",
        "description": "item1 desc"
      },
      "item2": {
        "name": "item-two",
        "description": "item2 desc"
      },
      "item3": {
        "name": "item-three",
        "description": "item3 desc"
      }
    }
  },
  "variables": {
    "baseVar1": "baseVarVal1",
    "myVar1": "test"
  }
}