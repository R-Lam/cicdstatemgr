channel: stage
pipelines:
  start:
    event-handlers:
      some-event:
        notify:
          message: '{{ basicMacro(''some-event fired in the start pipeline'') }}

            '
  test:
    event-handlers:
      another-event:
        notify:
          message: '{{ basicMacro(''another-event fired in the test pipeline'') }}

            '
          enabled: false
  build:
    event-handlers:
      testEvent:
        notify:
          message: '{{ basicMacro(''testEventFired!!! yes...'') }}

            '
      testNotifyEvent:
        notify:
          message: '{{ basicMacro(''build is successful'') }}

            '
          capture-response-data:
          - from: '{{ body.data.channel }}'
            to: state.lastPostedToNotifyChannel
          - from: '{{ body|tojson }}'
            to: state.lastPostedHttpResponse
      testRespondEvent:
        respond:
          if: '{{ state.lastPostedHttpResponse }}'
          url: '{{ (state.lastPostedHttpResponse|from_json).url }}'
          message: 'dummy responder message for {{ state.lastPostedDataRandomId }}

            '
      testSetValuesEvent:
        set-values:
          extractLastPostedNotifyMessage:
            if: "{%- if state.lastPostedHttpResponse -%}\n  1\n{%- endif -%}  \n"
            set:
            - from: '{%- set lastPostedHttpResponse = (state.lastPostedHttpResponse|from_json)
                -%}

                {{- lastPostedHttpResponse.data.message -}}

                '
              to: state.lastPostedNotifyMessage
      testTriggerPipelineEvent:
        trigger-pipeline:
          name: build
          args:
            whatever: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
      testManualChoiceEvent:
        manual-choice:
          title: '{{ basicMacro(''here are my choices'') }}

            '
          choices:
            choiceGroup1:
              header: 'Choice group one:'
              options:
              - text: Choice 1
                value: c1
              - text: Choice 2
                value: c2
            choiceGroup2:
              header: 'Choice group two {{ echo(''blah'') }}:'
              options:
              - text: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
                value: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
      testEmbeddedJsonEvent:
        notify:
          message: 'Here is some JSON from c:\windowspath\test and "quotes" { "dog":"beagle"
            }

            '
appPipelinesConfig:
  bases:
  - base1.yaml
  jinja2-macros:
    helloWorld: "{%- macro helloWorld(msg) -%}\n  Hello world msg = {{msg}}\n{%- endmacro\
      \ -%}\n"
  variables:
    myVar1: test
  cicd-contexts:
    stage:
      channel: stage
      pipelines:
        build:
          event-handlers:
            testEvent:
              notify:
                message: '{{ basicMacro(''testEventFired!!! yes...'') }}

                  '
            testNotifyEvent:
              notify:
                message: '{{ basicMacro(''build is successful'') }}

                  '
                capture-response-data:
                - from: '{{ body.data.channel }}'
                  to: state.lastPostedToNotifyChannel
                - from: '{{ body|tojson }}'
                  to: state.lastPostedHttpResponse
            testRespondEvent:
              respond:
                if: '{{ state.lastPostedHttpResponse }}'
                url: '{{ (state.lastPostedHttpResponse|from_json).url }}'
                message: 'dummy responder message for {{ state.lastPostedDataRandomId
                  }}

                  '
            testSetValuesEvent:
              set-values:
                extractLastPostedNotifyMessage:
                  if: "{%- if state.lastPostedHttpResponse -%}\n  1\n{%- endif -%}\
                    \  \n"
                  set:
                  - from: '{%- set lastPostedHttpResponse = (state.lastPostedHttpResponse|from_json)
                      -%}

                      {{- lastPostedHttpResponse.data.message -}}

                      '
                    to: state.lastPostedNotifyMessage
            testTriggerPipelineEvent:
              trigger-pipeline:
                name: build
                args:
                  whatever: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
            testManualChoiceEvent:
              manual-choice:
                title: '{{ basicMacro(''here are my choices'') }}

                  '
                choices:
                  choiceGroup1:
                    header: 'Choice group one:'
                    options:
                    - text: Choice 1
                      value: c1
                    - text: Choice 2
                      value: c2
                  choiceGroup2:
                    header: 'Choice group two {{ echo(''blah'') }}:'
                    options:
                    - text: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
                      value: '{{state.postedData[state.lastPostedDataRandomId].headers.userAgent}}'
            testEmbeddedJsonEvent:
              notify:
                message: 'Here is some JSON from c:\windowspath\test and "quotes"
                  { "dog":"beagle" }

                  '
        test:
          event-handlers:
            another-event:
              notify:
                enabled: false
jinja2Macros:
  byName:
    basicMacro: "{%- macro basicMacro(msg) -%}\n  This is basicMacro! msg = {{msg}}\n\
      {%- endmacro -%}\n"
    echo: "{%- macro echo(msg) -%}\n  {{msg}}\n{%- endmacro -%}\n"
    random: "{%- macro random() -%}\n  {{ range(10000, 99999) | random }}\n{%- endmacro\
      \ -%}\n"
    helloWorld: "{%- macro helloWorld(msg) -%}\n  Hello world msg = {{msg}}\n{%- endmacro\
      \ -%}\n"
  all: "{%- macro basicMacro(msg) -%}\n  This is basicMacro! msg = {{msg}}\n{%- endmacro\
    \ -%}{%- macro echo(msg) -%}\n  {{msg}}\n{%- endmacro -%}{%- macro random() -%}\n\
    \  {{ range(10000, 99999) | random }}\n{%- endmacro -%}{%- macro helloWorld(msg)\
    \ -%}\n  Hello world msg = {{msg}}\n{%- endmacro -%}"
state:
  cicdContextDataId: context-data-id-1
  cicdContextName: stage
  key1: valuechanged
  templateTest: '{{tmplctx.prop1}}'
  key2: value2
  fileBody:
    dog: beagle
    bark:
      quality: high
      volume: loud
  testList:
  - a
  testSet:
  - a
  - b
  - c
  - d
  testHeader2Value: myvalueforheader2
  triggerAutoArg1: '99999'
  postedData:
    '33633':
      body:
        message: This is basicMacro! msg = testEventFired!!! yes...
      headers:
        userAgent: python-requests/2.24.0
    '34382':
      body:
        message: This is basicMacro! msg = build is successful
      headers:
        userAgent: python-requests/2.24.0
    '85110':
      body:
        message: Here is some JSON from c:\windowspath\test and "quotes" { "dog":"beagle"
          }
      headers:
        userAgent: python-requests/2.24.0
  lastPostedDataRandomId: '85110'
  lastPostedToNotifyChannel: stage
  lastPostedHttpResponse: '{"args": {}, "data": {"channel": "stage", "message": "This
    is basicMacro! msg = build is successful", "randomId": "34382"}, "files": {},
    "form": {}, "headers": {"accept": "*/*", "accept-encoding": "gzip, deflate", "authorization":
    "Bearer FAKE_TOKEN", "cache-control": "no-cache", "content-length": "103", "content-type":
    "application/json; charset=UTF-8", "host": "postman-echo.com", "user-agent": "python-requests/2.24.0",
    "x-amzn-trace-id": "Root=1-5f4540da-a3a31ca26f178fa0ca7999ea", "x-forwarded-port":
    "443", "x-forwarded-proto": "https"}, "json": {"channel": "stage", "message":
    "This is basicMacro! msg = build is successful", "randomId": "34382"}, "url":
    "https://postman-echo.com/post"}'
variables:
  baseVar1: baseVarVal1
  myVar1: test
